name: Electron app builder


on:
  workflow_dispatch:
    inputs:
      node_version:
        description: 'Node version'
        type: string
        default: 22.x

jobs:
  build-mac:
    runs-on: macOS-latest
    name: Build on MacOS
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ github.event.inputs.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ github.event.inputs.node_version }}

      - name: Configure mac certificate
        env:
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

      - run: npm ci

      - name: Package electron
        env:
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
        run: |
          npm run package-electron
          npm run make-electron

      - run: find out | grep -v .webpack/renderer/assets

      - name: Verify signature
        run: codesign -vvv --verify --deep --strict out/schemio-darwin-arm64/schemio.app

      # - name: Codesign app bundle
      #   env:
      #     MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
      #   run: |
      #     echo "Signing app"
      #     codesign --force --deep --sign "$MACOS_CERTIFICATE_NAME" --entitlements "entitlements.plist" --options runtime --timestamp out/schemio-darwin-arm64/schemio.app -vvv
      #     codesign --force --options runtime --timestamp --sign "$MACOS_CERTIFICATE_NAME" --entitlements "entitlements.plist" \
      #         out/schemio-darwin-arm64/schemio.app/Contents/Frameworks/Electron\ Framework.framework/Versions/A/Libraries/libEGL.dylib
      #     codesign --force --options runtime --timestamp --sign "$MACOS_CERTIFICATE_NAME" --entitlements "entitlements.plist" \
      #         out/schemio-darwin-arm64/schemio.app/Contents/Frameworks/Electron\ Framework.framework/Versions/A/Libraries/libffmpeg.dylib
      #     codesign --force --options runtime --timestamp --sign "$MACOS_CERTIFICATE_NAME" --entitlements "entitlements.plist" \
      #         out/schemio-darwin-arm64/schemio.app/Contents/Frameworks/Electron\ Framework.framework/Versions/A/Libraries/libGLESv2.dylib
      #     codesign --force --options runtime --timestamp --sign "$MACOS_CERTIFICATE_NAME" --entitlements "entitlements.plist" \
      #         out/schemio-darwin-arm64/schemio.app/Contents/Frameworks/Electron\ Framework.framework/Versions/A/Libraries/libvk_swiftshader.dylib
      #     codesign --force --options runtime --timestamp --sign "$MACOS_CERTIFICATE_NAME" --entitlements "entitlements.plist" \
      #         out/schemio-darwin-arm64/schemio.app/Contents/Frameworks/Squirrel.framework/Versions/A/Resources/ShipIt
      #     echo "Finished codesigning, testing the signature"
      #     codesign -vvv --verify --deep --strict out/schemio-darwin-arm64/schemio.app

      # - name: "Notarize app bundle"
      #   env:
      #     PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
      #     PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
      #     PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
      #   run: |
      #     echo "Create keychain profile"
      #     xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

      #     echo "Creating temp notarization archive"
      #     ditto -c -k --keepParent "out/schemio-darwin-arm64/schemio.app" "notarization.zip"

      #     echo "Notarize app"
      #     xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

      #     echo "Attach staple"
      #     xcrun stapler staple "out/schemio-darwin-arm64/schemio.app"

      - name: Zip artifact for deployment
        run: zip out/make/zip/darwin/arm64/schemio-darwin-arm64.zip out/schemio-darwin-arm64/schemio.app -r
      - uses: actions/upload-artifact@v4
        with:
          name: schemio-electron-mac-zip
          path: out/make/zip/darwin/arm64/schemio-darwin-arm64.zip



  build-linux:
    runs-on: ubuntu-latest
    name: Build on Linux
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ github.event.inputs.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ github.event.inputs.node_version }}
      - run: npm ci
      - run: npm run package-electron
      - run: npm run make-electron
      - uses: actions/upload-artifact@v4
        with:
          name: schemio-electron-linux-rpm
          path: out/make/rpm/x64/schemio-*-1.x86_64.rpm
      - uses: actions/upload-artifact@v4
        with:
          name: schemio-electron-linux-deb
          path: out/make/deb/x64/schemio_*_amd64.deb
      - run: find out | grep -v .webpack/renderer/assets

  build-win:
    name: Build Windows app
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ github.event.inputs.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ github.event.inputs.node_version }}
      - run: npm ci
      - run: npm run package-electron
      - run: npm run make-electron
      - uses: actions/upload-artifact@v4
        with:
          name: schemio-electron-win-setup
          path: out/make/squirrel.windows/x64/schemio-* Setup.exe
      - run: npm install -g tree-cli
      - run: cd out && tree -l 8
