{"name": "Maslow pyramid", "args": {"levels": {"type": "number", "value": 3, "name": "Levels", "min": 1, "softMax": 10}, "colorStyle": {"type": "choice", "value": "gradient 2", "options": ["gradient 2", "gradient 3", "custom"], "name": "Color style"}, "color1": {"type": "color", "value": "#C6E7F5", "name": "Color 1", "depends": {"colorStyle": ["gradient 2", "gradient 3"]}}, "color2": {"type": "color", "value": "#50A6DA", "name": "Color 2", "depends": {"colorStyle": ["gradient 2", "gradient 3"]}}, "color3": {"type": "color", "value": "#CC89ED", "name": "Color 3", "depends": {"colorStyle": "gradient 3"}}, "gap": {"type": "number", "value": 5, "name": "Gap", "min": 0, "softMax": 30}, "strokeSize": {"type": "number", "value": 2, "name": "Stroke size", "min": 0, "softMax": 10}, "strokeColor": {"type": "color", "value": "#5C8197", "name": "Stroke color", "depends": {"colorStyle": ["gradient 2", "gradient 3"]}}}, "preview": "/assets/templates/previews/maslow.svg", "defaultArea": {"x": 0, "y": 0, "w": 400, "h": 700}, "import": ["./src/item.sch", "./src/maslow.sch"], "item": {"id": "root", "name": "Maslow pyramid", "shape": "dummy", "shapeProps": {"fill": {"type": "none"}, "strokeColor": "rgba(200,200,200,1)"}, "locked": false, "area": {"x": 0, "y": 0, "w": {"$-expr": "width"}, "h": {"$-expr": "height"}}, "childItems": [{"$-foreach": {"source": "levelItems", "it": "it"}, "id": {"$-expr": "it.id"}, "tags": [], "name": {"$-expr": "it.name"}, "shape": "trapezoid", "area": {"x": {"$-expr": "it.x"}, "y": {"$-expr": "it.y"}, "w": {"$-expr": "it.w"}, "h": {"$-expr": "it.h"}}, "shapeProps": {"$-expr": "toJSON(it.shapeProps)"}, "args": {"$-expr": "toJSON(it.args)"}, "textSlots": {"$-expr": "toJSON(it.textSlots)"}}]}, "init": "\nstruct Item {\n    id: uid()\n    name: ''\n    shape: 'rect'\n    x: 0\n    y: 0\n    w: 100\n    h: 50\n    shapeProps: Map()\n    childItems: List()\n    args: Map()\n    locked: true\n    textSlots: Map()\n    description: \"\"\n\n\n    traverse(callback) {\n        this.childItems.forEach((childItem) => {\n            childItem.traverse(callback)\n        })\n        callback(this)\n    }\n\n    getArgs() {\n        toJSON(this.args)\n    }\n\n    setText(slotName, text) {\n        if (!this.textSlots.has(slotName)) {\n            this.textSlots.set(slotName, Map('text', text))\n        } else {\n            this.textSlots.get(slotName).set('text', text)\n        }\n    }\n\n    toJSON() {\n        childItems = this.childItems.map((childItem) => { childItem.toJSON() })\n        result = toJSON(Map(\n            'id', this.id,\n            'childItems', childItems,\n            'name', this.name,\n            'description', this.description,\n            'shape', this.shape,\n            'area', Map('x', this.x, 'y', this.y, 'w', this.w, 'h', this.h, 'r', 0, 'sx', 1, 'sy', 1, 'px', 0.5, 'py', 0.5),\n            'shapeProps', this.shapeProps,\n            'args', this.args,\n            'locked', this.locked,\n            'textSlots', this.textSlots,\n        ))\n\n        result\n    }\n}\n\n\n\nlevelHeight = max(1, (height - gap * (levels - 1)) / max(1, levels))\nlevelItems = List()\n\n\nlocal c1 = decodeColor(color1)\nlocal c2 = decodeColor(color2)\nlocal c3 = decodeColor(color3)\n\nfor (local i = 0; i < levels; i++) {\n    local t = max(0, min(1, (levelHeight * (i+1) + gap * i) / max(1, height)))\n    local levelWidth = max(1, t * width)\n    local previousWidth = max(0, min(width, width * max(0, (levelHeight * i + gap * i) / max(1, height))))\n\n    local c = c1\n    if (colorStyle == 'gradient 2') {\n        local k = i / max(1, (levels - 1))\n        c = c1.gradient(c2, k)\n    } else if (colorStyle == 'gradient 3') {\n        local k = i / max(1, (levels - 1))\n        if (k < 0.5) {\n            c = c1.gradient(c2, k * 2)\n        } else {\n            c = c2.gradient(c3, (k - 0.5) * 2)\n        }\n    }\n\n    local item = Item(\n        `level-${i}`,\n        `Level ${i+1}`,\n        'trapezoid',\n        width/2 - levelWidth/2,\n        (levelHeight + gap)*i,\n        levelWidth,\n        levelHeight\n    )\n    item.shapeProps = Map(\n        'topRatio', (previousWidth / levelWidth) * 100,\n        'fill', Fill.solid(c.encode()),\n        'strokeSize', strokeSize,\n        'strokeColor', strokeColor,\n    )\n    item.textSlots = Map(\n        'body', Map(\n            'text', `<p><b>Level ${i+1}</b></p>`,\n        )\n    )\n\n    if (colorStyle == 'custom') {\n        item.args.set('templateIgnoredProps', List('shapeProps.fill', 'shapeProps.strokeColor', 'shapeProps.strokeSize', 'shapeProps.strokePattern'))\n    }\n\n    levelItems.add(item)\n}\n\n\n"}